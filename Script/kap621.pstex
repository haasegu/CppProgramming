%!PS-Adobe-2.0 EPSF-2.0
%%Title: kap621.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Thu Aug 29 18:48:13 2002
%%For: ghaase@gold (Gundolf Haase)
%%BoundingBox: 0 0 340 88
%%Magnification: 0.4700
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 88 moveto 0 0 lineto 340 0 lineto 340 88 lineto closepath clip newpath
1.0 95.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% left-shingles
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 48 48 true [ 48 0 0 -48 0 48 ]
	{<000000000001000000000001000000000002000000000002
	000000000004000000000004000000000008000000000008
	000000000010000000000010000000000020000000000020
	000000000040000000000040000000000080ffffffffffff
	000000010000000000010000000000020000000000020000
	000000040000000000040000000000080000000000080000
	000000100000000000100000000000200000000000200000
	000000400000000000400000000000800000ffffffffffff
	000100000000000100000000000200000000000200000000
	000400000000000400000000000800000000000800000000
	001000000000001000000000002000000000002000000000
	004000000000004000000000008000000000ffffffffffff>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P12 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.02820 0.02820 sc
%
% Fig objects follow
%
% Polyline
7.500 slw
n 0 1200 m 2400 1200 l 2400 2100 l 0 2100 l
 cp gs col0 s gr 
% Polyline
n 3600 1200 m 6000 1200 l 6000 2100 l 3600 2100 l
 cp gs col0 s gr 
% Polyline
n 7200 1200 m 12000 1200 l 12000 2100 l 7200 2100 l
 cp gs col0 s gr 
% Polyline
 [15 45] 45 sd
n 0 1200 m 600 1200 l 600 2100 l 0 2100 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P12 [24 0 0 -24 0.00 80.00] PATmp PATsp ef gr PATusp gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 1200 1200 m
 1200 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 1800 1200 m
 1800 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 4200 1200 m 4200 1500 l 4200 1800 l
 4200 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 4800 1200 m
 4800 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 5400 1200 m
 5400 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 7800 1200 m
 7800 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 8400 1200 m
 8400 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 9000 1200 m
 9000 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 10200 1200 m
 10200 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 10800 1200 m
 10800 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 11400 1200 m
 11400 2100 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 9600 1200 m
 9600 2100 l gs col0 s gr  [] 0 sd
% Polyline
2 slj
 [60] 0 sd
gs  clippath
262 2071 m 177 2100 l 246 2308 l 242 2152 l 332 2280 l cp
eoclip
n 9300 2025 m 9299 2026 l 9298 2029 l 9296 2034 l 9291 2042 l 9285 2053 l
 9277 2068 l 9267 2086 l 9255 2108 l 9240 2133 l 9223 2160 l
 9204 2190 l 9182 2221 l 9159 2254 l 9135 2287 l 9109 2321 l
 9081 2354 l 9053 2387 l 9023 2419 l 8992 2449 l 8960 2479 l
 8927 2508 l 8892 2535 l 8856 2562 l 8819 2587 l 8779 2612 l
 8738 2635 l 8694 2658 l 8649 2680 l 8600 2702 l 8548 2724 l
 8494 2745 l 8436 2766 l 8375 2788 l 8339 2800 l 8302 2812 l
 8264 2824 l 8224 2836 l 8184 2848 l 8142 2860 l 8099 2873 l
 8054 2885 l 8009 2897 l 7962 2910 l 7914 2922 l 7864 2935 l
 7813 2947 l 7761 2959 l 7708 2972 l 7653 2984 l 7597 2997 l
 7540 3009 l 7481 3022 l 7421 3034 l 7360 3046 l 7298 3059 l
 7235 3071 l 7171 3083 l 7106 3095 l 7040 3106 l 6973 3118 l
 6905 3129 l 6836 3140 l 6767 3151 l 6697 3162 l 6627 3172 l
 6556 3182 l 6485 3192 l 6414 3202 l 6342 3211 l 6270 3220 l
 6198 3229 l 6126 3237 l 6054 3245 l 5982 3253 l 5910 3260 l
 5838 3267 l 5766 3274 l 5695 3280 l 5624 3286 l 5553 3291 l
 5483 3296 l 5412 3301 l 5343 3305 l 5273 3309 l 5204 3312 l
 5136 3315 l 5067 3318 l 4999 3320 l 4931 3322 l 4864 3323 l
 4797 3324 l 4730 3325 l 4663 3325 l 4595 3325 l 4528 3324 l
 4461 3323 l 4394 3322 l 4326 3320 l 4258 3318 l 4190 3315 l
 4122 3312 l 4053 3309 l 3984 3305 l 3915 3301 l 3845 3296 l
 3775 3291 l 3705 3286 l 3634 3280 l 3564 3274 l 3493 3268 l
 3422 3261 l 3350 3253 l 3279 3246 l 3208 3238 l 3137 3230 l
 3065 3221 l 2994 3212 l 2924 3203 l 2853 3193 l 2783 3184 l
 2713 3174 l 2644 3163 l 2575 3153 l 2507 3142 l 2440 3131 l
 2374 3120 l 2308 3109 l 2243 3097 l 2179 3086 l 2117 3074 l
 2055 3062 l 1994 3050 l 1935 3038 l 1876 3026 l 1819 3014 l
 1763 3002 l 1709 2990 l 1656 2978 l 1604 2965 l 1553 2953 l
 1504 2941 l 1456 2929 l 1409 2917 l 1364 2905 l 1320 2893 l
 1277 2881 l 1236 2870 l 1196 2858 l 1157 2846 l 1119 2835 l
 1082 2823 l 1047 2811 l 1013 2800 l 955 2780 l 900 2760 l
 849 2740 l 800 2719 l 755 2699 l 713 2678 l 673 2657 l
 636 2635 l 601 2612 l 568 2589 l 536 2564 l 507 2539 l
 479 2513 l 452 2486 l 427 2457 l 403 2428 l 380 2398 l
 359 2368 l 340 2338 l 321 2308 l 305 2278 l 289 2249 l
 276 2222 l 264 2197 l 254 2175 l 246 2155 l 239 2139 l
 234 2126 l 230 2115 l
 225 2100 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
30.000 slw
n 332 2280 m 242 2152 l 246 2308 l 332 2280 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
7.500 slw
 [60] 0 sd
gs  clippath
9121 1163 m 9195 1111 l 9069 931 l 9119 1080 l 8995 983 l cp
eoclip
n 225 1350 m 225 1349 l 227 1346 l 229 1342 l 232 1335 l 237 1325 l
 244 1312 l 253 1295 l 264 1276 l 277 1254 l 292 1230 l
 309 1203 l 328 1175 l 349 1146 l 372 1117 l 396 1087 l
 422 1058 l 449 1029 l 477 1001 l 507 974 l 538 948 l
 571 923 l 605 899 l 641 877 l 679 855 l 719 834 l
 761 814 l 805 794 l 853 776 l 903 757 l 956 740 l
 1013 722 l 1074 705 l 1138 688 l 1175 678 l 1214 668 l
 1254 658 l 1296 649 l 1339 639 l 1383 629 l 1428 619 l
 1475 610 l 1523 600 l 1572 590 l 1623 580 l 1675 571 l
 1728 561 l 1783 551 l 1840 541 l 1897 532 l 1956 522 l
 2016 512 l 2078 503 l 2140 493 l 2204 484 l 2269 474 l
 2335 465 l 2402 455 l 2470 446 l 2539 437 l 2609 428 l
 2679 420 l 2751 411 l 2822 403 l 2895 394 l 2968 386 l
 3041 379 l 3114 371 l 3188 363 l 3262 356 l 3336 349 l
 3410 343 l 3484 336 l 3558 330 l 3631 324 l 3705 318 l
 3778 313 l 3850 307 l 3923 303 l 3995 298 l 4066 294 l
 4137 289 l 4208 286 l 4278 282 l 4347 279 l 4416 276 l
 4484 273 l 4552 271 l 4619 269 l 4686 267 l 4753 265 l
 4819 264 l 4885 263 l 4950 263 l 5017 262 l 5085 262 l
 5152 262 l 5219 262 l 5286 263 l 5354 264 l 5421 266 l
 5488 267 l 5556 269 l 5624 271 l 5692 274 l 5760 276 l
 5828 279 l 5896 283 l 5965 286 l 6033 290 l 6102 294 l
 6170 299 l 6239 303 l 6307 308 l 6375 314 l 6443 319 l
 6511 325 l 6578 331 l 6646 337 l 6712 343 l 6778 350 l
 6844 357 l 6909 363 l 6973 371 l 7036 378 l 7099 385 l
 7160 393 l 7221 401 l 7281 409 l 7339 417 l 7397 425 l
 7454 433 l 7509 441 l 7563 449 l 7616 457 l 7668 466 l
 7718 474 l 7767 483 l 7815 491 l 7862 500 l 7907 508 l
 7951 516 l 7994 525 l 8035 533 l 8075 542 l 8114 550 l
 8152 558 l 8189 567 l 8225 575 l 8259 583 l 8293 592 l
 8325 600 l 8385 616 l 8442 632 l 8495 648 l 8544 665 l
 8591 682 l 8635 699 l 8676 718 l 8716 737 l 8753 756 l
 8789 777 l 8824 799 l 8857 822 l 8888 846 l 8919 871 l
 8949 896 l 8977 922 l 9003 949 l 9028 975 l 9051 1000 l
 9072 1024 l 9091 1046 l 9107 1066 l 9120 1083 l 9131 1097 l
 9138 1108 l
 9150 1125 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
30.000 slw
n 8995 983 m 9119 1080 l 9069 931 l 8995 983 l  cp gs 0.00 setgray ef gr  col0 s
/Times-Bold ff 720.00 scf sf
3000 1800 m
gs 1 -1 sc (...) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Bold ff 720.00 scf sf
6600 1800 m
gs 1 -1 sc (...) dup sw pop 2 div neg 0 rm  col0 sh gr
/Courier ff 360.00 scf sf
9600 1800 m
gs 1 -1 sc (pint) dup sw pop 2 div neg 0 rm  col0 sh gr
/Courier ff 360.00 scf sf
1125 1575 m
gs 1 -1 sc (i) dup sw pop 2 div neg 0 rm  col0 sh gr
/Courier ff 360.00 scf sf
4950 1800 m
gs 1 -1 sc (j) dup sw pop 2 div neg 0 rm  col0 sh gr
/Courier ff 360.00 scf sf
975 1950 m
gs 1 -1 sc (*pint) col0 sh gr
/Times-Bold ff 360.00 scf sf
4725 600 m
gs 1 -1 sc (&) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Bold ff 360.00 scf sf
4500 3300 m
gs 1 -1 sc (*) dup sw pop 2 div neg 0 rm  col0 sh gr
$F2psEnd
rs
end
